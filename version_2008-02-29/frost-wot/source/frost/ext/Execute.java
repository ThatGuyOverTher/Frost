/*
Execute.java / Frost
Copyright (C) 2006  Frost Project <jtcfrost.sourceforge.net>

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
*/
package frost.ext;

import java.io.*;

/**
 * @author saces
 */
public class Execute {
	
	private static final int BUFF_SIZE = 10240;
	
	public static ExecResult run_wait(String[] cmd) {
		return run_wait(cmd, "UTF-8");
	}
	
	/**
     * start an external program, wait for done and return their output
     * @param cmd the command to execute
     * @param cs the charset
     * @return ExecResult the output generated by the program. Standard ouput and Error output are captured.
     */
    public static ExecResult run_wait(String[] cmd, String cs) {
    	
    	ExecResult result = new ExecResult();
    	char[] cbuf; 

        try {
        			
			cbuf = new char[BUFF_SIZE];		
			result.proc = runtimeExec(cmd);
			//ProcessBuilder pb = new ProcessBuilder(order);   // java 1.5 List<String> order 
			//Process p = pb.start();
        
			InputStream isStdOut = result.proc.getInputStream();
			InputStream isStdErr = result.proc.getErrorStream();
        
			result.stdOut = new StringBuilder();
        
			InputStreamReader iSReader = new InputStreamReader(isStdOut, cs);
			BufferedReader reader = new BufferedReader(iSReader);
			int count = 0;
			while( count != -1 ) {
				count = reader.read(cbuf, 0, BUFF_SIZE);
				if (count != -1)
					result.stdOut.append(cbuf, 0, count);
			}
			reader.close();
			
			result.stdErr = new StringBuilder();
        
			iSReader = new InputStreamReader(isStdErr, cs);
			reader = new BufferedReader(iSReader);
			count = 0;
			while( count != -1 ) {
				count = reader.read(cbuf, 0, BUFF_SIZE);
				if (count != -1)
					result.stdOut.append(cbuf, 0, count);
			}
			reader.close();
			
			result.proc.waitFor();
        
			result.retcode = result.proc.exitValue();
        
		} catch (Throwable t) {
			result.error = t;
		}  
        
        return result;
    }
    
    /**
     * Execute the String [] cmd (also on windows)
     * @param cmd
     * @return Process
     * @throws IOException
     */
    public static Process runtimeExec(String[] cmd) throws IOException {
    	Process p;
		if (isWindows()) {
			StringBuilder winCmd = new StringBuilder();
			for (int i = 0; i < cmd.length; i++) {
				winCmd.append(' ');
				if (cmd[i].indexOf(' ') > -1) {
                    winCmd.append("\"\" "); // append empty ""
					winCmd.append('"');
					winCmd.append(cmd[i]);
					winCmd.append('"');
				} else {
					winCmd.append(cmd[i]);
				}
			}
			p = Runtime.getRuntime().exec(winCmd.toString());
		} else {
			p = Runtime.getRuntime().exec(cmd);
		}

		return p;
    }
    
    /**
     * @return boolean true if the running os is windows, otherwise false
     */
    public static boolean isWindows() {
    	return (System.getProperty("os.name").toLowerCase().indexOf("windows") > -1);
    }
}
