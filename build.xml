<?xml version="1.0"?>
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!-- Build file for Frost-wot                                          -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<!-- Main settings you maybe want to change:                           -->
<!--   "zipName"                                                       -->
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
<project name="frost" default="main" basedir=".">

  <!-- Prefix of the name of the distribution files to create -->
  <property name="distZipNamePrefix" value="frost-"/>
  <property name="distJarNamePrefix" value="frost-"/>
  <property name="distSourceZipNamePrefix" value="frost-source-"/>

  <!-- Give user a chance to override without editing this file
       (and without typing -D each time it compiles it) -->
  <property file=".ant.properties" />
  <property file="${user.home}/.ant.properties" />

  <!-- Don't use systems CLASSPATH, use only the CLASSPATH set in this build file -->
  <property name="build.sysclasspath" value="ignore"/>

  <!--  General project properties -->
  <property name="Name" value="Frost"/>
  <property name="jarName" value="frost.jar"/>

  <!--  javac compiler options -->
  <property name="debug" value="true" /> <!-- Enabled to see the line number of an exception in stack trace -->
  <property name="deprecation" value="true" />
  <property name="optimize" value="false" /> <!-- Enabled to see the line number of an exception in stack trace -->
  <property name="source" value = "1.4" /> <!-- yay, assertions! -->

  <!--  Set the properties related to the source tree -->
  <property name="src.dir" value="source"/>
  <property name="bin.dir" value="bin"/>
  <property name="res.dir" value="res"/>
  <property name="lib.dir" value="lib"/>
  <property name="specs.dir" value="specs"/>
  <property name="src.dir.feclib" value="${lib.dir}/fecImpl"/>
  <property name="src.dir.genchklib" value="${lib.dir}/genChkImpl"/>
  <property name="src.dir.skinlfFixLib" value="${lib.dir}/skinlfFix"/>

  <!--  Set the properties for the build area  -->
  <property name="build.dir" value="build"/>
  <property name="build.classes" value="${build.dir}/classes"/>
  <property name="build.classes.feclib" value="${build.dir}/classes_feclib"/>
  <property name="build.classes.genchklib" value="${build.dir}/classes_genchklib"/>
  <property name="build.classes.skinlfFixLib" value="${build.dir}/classes_skinlfFixLib"/>

  <!--  Set up properties for the distribution area -->
  <property name="dist.dir" value="${build.dir}/dist"/>
  <property name="release.dir" value="${build.dir}/release"/>

  <!--  The CLASSPATH to use for compilation. -->
  <path id="classpath">
    <pathelement location="${lib.dir}/xercesImpl.jar"/>
    <pathelement location="${lib.dir}/xml-apis.jar"/>
    <pathelement location="${lib.dir}/xmlParserAPIs.jar"/>
    <pathelement location="${lib.dir}/BCastle.jar"/>
    <pathelement location="${build.classes.feclib}"/>
    <pathelement location="${build.classes.genchklib}"/>
    <pathelement location="${build.classes.skinlfFixLib}"/>
    <pathelement location="${lib.dir}/skinlf.jar"/>
  </path>

  <!--  Specify logfile name -->
  <property name="logfilename" value="build.log"/>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!--  Output some messages and set DATE,TIME variables                 -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <target name="startmsg"
          description="--> outputs message">

    <tstamp/>
    <echo>Starting build of ${Name}
Date       : ${DSTAMP}
Time       : ${TSTAMP}
JVM version: ${java.version} of '${java.vendor}' in '${java.home}'
Ant project: ${ant.project.name}
Ant version: ${ant.version}
Build OS   : ${os.name} ${os.version} (${os.arch})
Build user : ${user.name}
Build log  : ${logfilename}</echo>

  </target>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!--  Build the code  -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <target name="build"
          depends="startmsg"
          description="--> compiles the source code">
    <mkdir dir="${build.dir}"/>

    <delete quiet="true" dir="${build.classes}"/>
 	<delete quiet="true" dir="${build.classes.feclib}"/>
    <delete quiet="true" dir="${build.classes.genchklib}"/>
    <delete quiet="true" dir="${build.classes.skinlfFixLib}"/>
    <mkdir dir="${build.classes}"/>
    <mkdir dir="${build.classes.feclib}"/>
    <mkdir dir="${build.classes.genchklib}"/>
    <mkdir dir="${build.classes.skinlfFixLib}"/>

    <javac srcdir="${src.dir.feclib}"
           destdir="${build.classes.feclib}"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}"
           classpath="${src.dir.feclib}">
    </javac>
    <copy todir="${build.classes.feclib}">
        <fileset dir="${lib.dir}/fecImpl">
            <include name="**/*.class"/>
            <include name="**/*.properties"/>
        </fileset>
    </copy>

    <javac srcdir="${src.dir.genchklib}"
           destdir="${build.classes.genchklib}"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}">
        <classpath>
            <pathelement location="${build.classes.feclib}"/>
<!--            <pathelement location="${src.dir.genchklib}"/>-->
        </classpath>
    </javac>

    <javac srcdir="${src.dir}"
           destdir="${build.classes}"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}"
	   source = "${source}"
           encoding="UTF8">
      <classpath refid="classpath" />
    </javac>

    <javac srcdir="${src.dir.skinlfFixLib}"
           destdir="${build.classes.skinlfFixLib}"
           debug="${debug}"
           deprecation="${deprecation}"
           optimize="${optimize}">
          <classpath>
              <pathelement location="${build.classes}"/>
              <pathelement location="${src.dir.skinlfFixLib}"/>
              <pathelement location="${lib.dir}/skinlf.jar"/>
          </classpath>
    </javac>

  </target>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!--  Create the jar file  -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <target name="jar"
          depends="build"
          description="--> creates the jar file">

    <delete quiet="true" file="${dist.dir}/${jarName}"/>
    <mkdir dir="${dist.dir}"/>

	<!--  Modify the version and copy the manifest -->
	<filter token="VERSION_FROM_ANT" value="${NOW.DATE} dev"/>
	<copy
		file="${src.dir}/frost.manifest"
		todir="${dist.dir}"
		filtering="true"/>

    <!--  Build the jar file.  -->
    <jar jarfile="${dist.dir}/${jarName}"
         manifest="${dist.dir}/frost.manifest">
      <fileset dir="${build.classes}">
        <include name="**/*.class"/>
      </fileset>
      <fileset dir="${res.dir}">
        <include name="**"/>
      </fileset>
    </jar>

    <delete quiet="true" file="${dist.dir}/lib/fecImpl.jar"/>
    <mkdir dir="${dist.dir}/lib"/>
    <jar jarfile="${dist.dir}/lib/fecImpl.jar">
      <fileset dir="${build.classes.feclib}">
        <include name="**/*.class"/>
        <include name="**/*.properties"/>
      </fileset>
    </jar>

    <delete quiet="true" file="${dist.dir}/lib/genChkImpl.jar"/>
    <mkdir dir="${dist.dir}/lib"/>
    <jar jarfile="${dist.dir}/lib/genChkImpl.jar">
      <fileset dir="${build.classes.genchklib}">
        <include name="**/*.class"/>
      </fileset>
    </jar>

    <delete quiet="true" file="${dist.dir}/lib/skinlfFix.jar"/>
    <mkdir dir="${dist.dir}/lib"/>
    <jar jarfile="${dist.dir}/lib/skinlfFix.jar">
      <fileset dir="${build.classes.skinlfFixLib}">
        <include name="**/*.class"/>
      </fileset>
    </jar>

  </target>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Prepare the distribution (zip, source zip and jar)				 -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <target name="distro"
          depends="jar"
          description="--> prepares the distribution.">



	<!-- Prepares the zip -->

    <copy todir="${dist.dir}" >
      <fileset dir="${bin.dir}"/>
    </copy>

    <copy todir="${dist.dir}/lib">
        <fileset dir="${lib.dir}">
            <filename name="*.jar"/>
        </fileset>
    </copy>

    <mkdir dir="${dist.dir}/downloads"/>
    <mkdir dir="${dist.dir}/exec"/>


   </target>

   <target name ="release"
   	depends = "main"
	description="--> prepares .jar and source.zip for release">

	<echo>Preparing files for release..
	</echo>

    <mkdir dir="${release.dir}"/>
    <delete quiet="true" file="${release.dir}/${distZipNamePrefix}${NOW.DATE}.zip"/>
    <zip basedir="${dist.dir}" destfile="${release.dir}/${distZipNamePrefix}${NOW.DATE}.zip"/>

    <copy todir="${release.dir}">
      <fileset dir="${dist.dir}">
      	<filename name="${jarName}"/>
      </fileset>
    </copy>

    <delete quiet="true" file="${release.dir}/${distJarNamePrefix}${NOW.DATE}.jar"/>
    <move file="${release.dir}/${jarName}" tofile="${release.dir}/${distJarNamePrefix}${NOW.DATE}.jar"/>

    <!-- Prepares the source zip -->

    <delete quiet="true" file="${release.dir}/${distSourceZipNamePrefix}${NOW.DATE}.zip"/>
    <zip destfile="${release.dir}/${distSourceZipNamePrefix}${NOW.DATE}.zip" filesonly="true">
    	<zipfileset dir="."
    				prefix = "frost-wot"
    				excludes=".* **/CVS/*"
    				includes="${src.dir}/**/* ${bin.dir}/**/* ${res.dir}/**/*
    						  ${lib.dir}/**/* ${specs.dir}/**/*
						  build.xml  HISTORY.txt TODO"/>
    </zip>

    <echo>

Source, zip and jar ready for release at ${release.dir}</echo>
  </target>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Clean -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <target name="clean"
          description="--> clean the build files.">

    <delete quiet="true" dir="${build.dir}"/>

  </target>

  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <!-- Main target - runs dist by default -->
  <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
  <target name="main" description="--> creates the distribution in ./dist">

    <record name="${logfilename}" action="start"/>

	<tstamp>
		<format property="NOW.DATE" pattern="dd-MMM-yyyy" locale="en"/>
		<format property="NOW.TIME" pattern="HH:mm:ss" locale="en" />
	</tstamp>

    <antcall target="distro"/>

    <echo>Finished build of ${Name}
			Date : ${NOW.DATE}
			Time : ${NOW.TIME}</echo>

    <record name="${logfilename}" action="stop"/>

  </target>

</project>
